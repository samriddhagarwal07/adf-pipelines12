{
	"name": "dfTripData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "TripDataCsv",
						"type": "DatasetReference"
					},
					"name": "TripDataCSV"
				},
				{
					"dataset": {
						"referenceName": "TripDataTable",
						"type": "DatasetReference"
					},
					"name": "TripFaresTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "TripAggregateCsv",
						"type": "DatasetReference"
					},
					"name": "TripAggregateSink"
				}
			],
			"transformations": [
				{
					"name": "JoinTrip"
				},
				{
					"name": "AggregateByPayType"
				}
			],
			"scriptLines": [
				"source(output(",
				"          medallion as string,",
				"          hack_license as string,",
				"          vendor_id as string,",
				"          rate_code as short,",
				"          store_and_fwd_flag as boolean,",
				"          pickup_datetime as timestamp,",
				"          dropoff_datetime as timestamp,",
				"          passenger_count as short,",
				"          trip_time_in_secs as short,",
				"          trip_distance as double,",
				"          pickup_longitude as double,",
				"          pickup_latitude as double,",
				"          dropoff_longitude as double,",
				"          dropoff_latitude as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TripDataCSV",
				"source(output(",
				"          medallion as string,",
				"          hack_license as string,",
				"          vendor_id as string,",
				"          pickup_datetime as string,",
				"          payment_type as string,",
				"          fare_amount as string,",
				"          surcharge as string,",
				"          mta_tax as string,",
				"          tip_amount as string,",
				"          tolls_amount as string,",
				"          total_amount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> TripFaresTable",
				"TripDataCSV, TripFaresTable join(TripDataCSV@medallion == TripFaresTable@medallion",
				"     && TripDataCSV@hack_license == TripFaresTable@hack_license",
				"     && TripDataCSV@vendor_id == TripFaresTable@vendor_id",
				"     && TripDataCSV@pickup_datetime == toTimestamp(TripFaresTable@pickup_datetime),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTrip",
				"JoinTrip aggregate(groupBy(payment_type),",
				"     Average_fare = avg(toInteger(total_amount)),",
				"          Total_trip_distance = sum(toInteger(trip_distance))) ~> AggregateByPayType",
				"AggregateByPayType sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TripAggregateSink"
			]
		}
	}
}